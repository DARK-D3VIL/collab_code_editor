<div class="editor-container" style="height: 100vh; display: flex; flex-direction: column; background-color: #f8f9fa;">
  <!-- Header -->
  <div class="d-flex justify-content-between align-items-center px-3 py-2 bg-white shadow-sm border-bottom sticky-top" style="z-index: 100;">
    <h5 class="mb-0">
      📝 Editing: <strong><%= @file_name %></strong>
      <span class="text-muted">(<%= @language.capitalize %>)</span>
      <span class="badge bg-secondary">Branch: <%= @branch_name %></span>
    </h5>
    <div class="d-flex gap-2">
      <button id="saveBtn" class="btn btn-outline-success">💾 Save</button>
      <button id="commitBtn" class="btn btn-outline-primary">✅ Commit</button>
      <button id="exitBtn" class="btn btn-outline-danger">🚪 Exit</button>
    </div>
  </div>

  <!-- Editor and Conflict Panel -->
  <div class="d-flex flex-grow-1">
    <div id="editor" class="flex-grow-1" style="height: 100%; border-right: 1px solid #ccc;"></div>

    <!-- Conflict Panel -->
    <div id="editor_conflicts" class="bg-light p-3" style="width: 30%; overflow-y: auto;">
      <h5>Conflicts</h5>
      <%= turbo_frame_tag "editor_conflicts" do %>
        <%= render partial: "conflicts/conflict", collection: @conflicts, as: :conflict %>
      <% end %>
    </div>
  </div>
</div>

<%= javascript_importmap_tags %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs/loader.min.js"></script>

<script type="module">
  import { createConsumer } from "@rails/actioncable";

  const projectId = <%= @project.id %>;
  const fileName = "<%= @file_name %>";
  const initialContent = `<%= raw @file_content %>`;
  const language = "<%= @language %>";
  const branchName = "<%= @branch_name %>";
  const currentPath = "<%= @file_path %>";

  const saveUrl = `/projects/${projectId}/files/${encodeURIComponent(fileName)}/save?path=${encodeURIComponent(currentPath)}`;
  const commitUrl = `/projects/${projectId}/files/${encodeURIComponent(fileName)}/commit?path=${encodeURIComponent(currentPath)}`;
  const redirectUrl = `/projects/${projectId}/files?path=${encodeURIComponent(currentPath)}`;

  let editor;
  let lastContent = initialContent;
  let isApplyingRemoteUpdate = false;

  require.config({ paths: { vs: "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs" } });

  require(["vs/editor/editor.main"], function () {
    editor = monaco.editor.create(document.getElementById("editor"), {
      value: initialContent,
      language: language,
      automaticLayout: true,
      theme: "vs",
      fontSize: 14,
      minimap: { enabled: false },
      wordWrap: "on",
      padding: { top: 10, bottom: 10 }
    });

    const consumer = createConsumer();

    const channel = consumer.subscriptions.create(
      {
        channel: "EditorChannel",
        project_id: projectId,
        file_id: fileName,
        branch: branchName
      },
      {
        received(data) {
          if (data.conflict) {
            // Conflict notification for current user
            fetch(`/conflicts/panel?file_id=${fileName}&branch=${branchName}&project_id=${projectId}`)
              .then(resp => resp.text())
              .then(html => {
                const turboFrame = document.getElementById("editor_conflicts");
                if (turboFrame) turboFrame.innerHTML = html;
              });
            return;
          }

          if (data.content !== editor.getValue() && !isApplyingRemoteUpdate) {
            isApplyingRemoteUpdate = true;

            const currentPosition = editor.getPosition();
            editor.setValue(data.content);
            editor.setPosition(currentPosition);

            lastContent = data.content;
            setTimeout(() => (isApplyingRemoteUpdate = false), 100);
          }
        }
      }
    );

    // Track changes and broadcast
    let debounceTimer;
    editor.onDidChangeModelContent(() => {
      if (isApplyingRemoteUpdate) return;

      const newContent = editor.getValue();
      const baseLines = lastContent.split("\n");
      const newLines = newContent.split("\n");

      const changed_lines = {};
      newLines.forEach((line, idx) => {
        if (baseLines[idx] !== line) changed_lines[idx + 1] = line;
      });

      lastContent = newContent;

      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => {
        channel.send({
          content: newContent,
          base_content: baseLines.join("\n"),
          changed_lines: changed_lines
        });
      }, 300);
    });

    function saveContent(callback) {
      const content = editor.getValue();
      const path = new URLSearchParams(window.location.search).get("path");
      const fileName = window.location.pathname.split("/").slice(-2)[0];
      const projectId = window.location.pathname.split("/")[2];

      fetch(`/projects/${projectId}/files/${fileName}/save`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({
          content: content,
          path: path // send path in JSON body instead of URL
        })
      })
      .then(resp => resp.json())
      .then(data => {
        if (data.status === "success") {
          callback();
        } else {
          alert("❌ Save failed: " + data.message);
        }
      });
    }


    // Save + Commit + Exit
    document.getElementById("saveBtn").addEventListener("click", () => {
      const content = editor.getValue();
      const path = new URLSearchParams(window.location.search).get("path");
      const fileName = "<%= @file_name %>";
      const projectId = "<%= @project.id %>";

      fetch(`/projects/${projectId}/files/${fileName}/save`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({
          content: content,
          path: path
        })
      }).then(response => response.json())
        .then(data => {
          if (data.status === "success") {
            alert("✅ File saved successfully!");
            window.location.href = redirectUrl;
          } else {
            alert("❌ Error: " + data.message);
          }
        });
    });

    document.getElementById("commitBtn").addEventListener("click", () => {
      const message = prompt("Enter commit message:");
      if (!message) return;

      const path = new URLSearchParams(window.location.search).get("path");

      saveContent(() => {
        fetch(commitUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ message, path })  // Send path in the request
        })
        .then(resp => resp.json())
        .then(data => {
          if (data.status === "success") {
            alert("✅ Commit successful.");
            window.location.href = redirectUrl;
          } else {
            alert("❌ Commit failed: " + data.message);
          }
        });
      });
    });

    document.getElementById("exitBtn").addEventListener("click", () => {
      if (confirm("Exit without saving?")) {
        window.location.href = redirectUrl;
      }
    });
  });
</script>
