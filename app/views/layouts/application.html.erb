<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Collab Editor" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <link rel="manifest" href="/manifest.json">
    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <%= javascript_include_tag "application", type: "module" %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <%= javascript_include_tag "https://cdn.jsdelivr.net/npm/@gitgraph/js" %>
    <%= javascript_include_tag "https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" %>
    <%= javascript_include_tag "application", "data-turbo-track": "reload", defer: true %>
  </head>

  <body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom shadow-sm sticky-top">
      <div class="container">
        <!-- Brand -->
        <%= link_to root_path, class: "navbar-brand fw-bold text-secondary d-flex align-items-center" do %>
          <i class="bi bi-terminal me-2 text-muted"></i>Collab Editor
        <% end %>

        <!-- Toggler for mobile -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent">
          <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Nav Links -->
        <div class="collapse navbar-collapse" id="navbarContent">
          <!-- Left-side Navigation -->
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <% if current_user %>
              <li class="nav-item">
                <%= link_to "Projects", projects_path, class: "nav-link #{current_page?(projects_path) ? 'fw-semibold text-dark' : 'text-muted'}" %>
              </li>

              <% if controller_name.in?(%w[project_files project_git project_members]) && defined?(@project) %>
                <li class="nav-item">
                  <%= link_to "Files", project_project_files_path(@project, path: ""), class: "nav-link #{controller_name == 'project_files' ? 'fw-semibold text-dark' : 'text-muted'}" %>
                </li>
                <li class="nav-item">
                  <%= link_to "Git", project_git_path(@project), class: "nav-link #{controller_name == 'project_git' ? 'fw-semibold text-dark' : 'text-muted'}" %>
                </li>
                <% if current_user == @project.owner %>
                  <li class="nav-item">
                    <%= link_to "Members", project_project_members_path(@project), class: "nav-link #{controller_name == 'project_members' ? 'fw-semibold text-dark' : 'text-muted'}" %>
                  </li>
                <% end %>
              <% end %>
            <% end %>
          </ul>

          <!-- Center Search Bar (only visible when logged in) -->
          <% if current_user %>
            <div class="mx-auto d-none d-lg-block" style="max-width: 400px; width: 100%;">
              <div class="input-group">
                <input type="text" id="globalSearch" class="form-control" placeholder="Search on this page..." autocomplete="off">
                <button class="btn btn-outline-secondary" type="button" id="searchButton">
                  <i class="bi bi-search"></i>
                </button>
                <button class="btn btn-outline-secondary d-none" type="button" id="clearSearch">
                  <i class="bi bi-x-lg"></i>
                </button>
              </div>
              <!-- Search Results Dropdown -->
              <div id="searchResults" class="dropdown-menu w-100 shadow-lg" style="max-height: 400px; overflow-y: auto; display: none;">
                <div id="searchResultsContent">
                  <div class="dropdown-item-text text-muted text-center py-3">
                    <i class="bi bi-search me-2"></i>Start typing to search...
                  </div>
                </div>
              </div>
            </div>
          <% end %>

          <!-- Right-side Auth Controls -->
          <ul class="navbar-nav ms-auto align-items-center">
            <% if current_user %>
              <!-- Mobile Search Button -->
              <li class="nav-item d-lg-none">
                <button class="nav-link btn btn-link text-muted" data-bs-toggle="collapse" data-bs-target="#mobileSearch">
                  <i class="bi bi-search"></i>
                </button>
              </li>
              
              <!-- User Dropdown -->
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle d-flex align-items-center text-muted" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class="bi bi-person-circle me-1 text-muted"></i>
                  <span class="fw-medium"><%= current_user.username || current_user.email %></span>
                </a>
                <ul class="dropdown-menu dropdown-menu-end shadow-sm">
                  <li>
                    <%= button_to "Sign Out", destroy_user_session_path, method: :delete, class: "dropdown-item text-danger" %>
                  </li>
                </ul>
              </li>
            <% else %>
              <li class="nav-item">
                <%= link_to "Sign In", new_user_session_path, class: "btn btn-sm btn-outline-secondary" %>
              </li>
            <% end %>
          </ul>
        </div>

        <!-- Mobile Search Bar -->
        <% if current_user %>
          <div class="collapse w-100 d-lg-none" id="mobileSearch">
            <div class="mt-3">
              <div class="input-group">
                <input type="text" id="mobileGlobalSearch" class="form-control" placeholder="Search on this page..." autocomplete="off">
                <button class="btn btn-outline-secondary" type="button" id="mobileSearchButton">
                  <i class="bi bi-search"></i>
                </button>
                <button class="btn btn-outline-secondary d-none" type="button" id="mobileClearSearch">
                  <i class="bi bi-x-lg"></i>
                </button>
              </div>
              <!-- Mobile Search Results -->
              <div id="mobileSearchResults" class="dropdown-menu w-100 shadow-lg" style="max-height: 300px; overflow-y: auto; display: none; position: static; float: none;">
                <div id="mobileSearchResultsContent">
                  <div class="dropdown-item-text text-muted text-center py-3">
                    <i class="bi bi-search me-2"></i>Start typing to search...
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </nav>

    <!-- Flash Alerts -->
    <div class="container mt-3">
      <% flash.each do |type, message| %>
        <% alert_class = case type.to_sym
            when :notice then 'alert-success'
            when :alert  then 'alert-danger'
            else "alert-info"
          end %>
        <div class="alert <%= alert_class %> alert-dismissible fade show" role="alert">
          <%= message %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% end %>
    </div>

    <%= yield %>

    <!-- Client-side Search Script -->
    <script>
      class ClientSideSearch {
        constructor() {
          this.searchableElements = [];
          this.originalStyles = new Map();
          this.currentHighlights = [];
          this.searchResultsVisible = false;
          
          this.init();
        }

        init() {
          // Initialize both desktop and mobile search
          this.initializeSearch('globalSearch', 'searchResults', 'searchResultsContent', 'clearSearch');
          this.initializeSearch('mobileGlobalSearch', 'mobileSearchResults', 'mobileSearchResultsContent', 'mobileClearSearch');
          
          // Update searchable elements when page loads or changes
          this.updateSearchableElements();
          
          // Re-initialize on Turbo navigation
          document.addEventListener('turbo:load', () => {
            this.updateSearchableElements();
          });
        }

        initializeSearch(inputId, resultsId, contentId, clearId) {
          const searchInput = document.getElementById(inputId);
          const searchResults = document.getElementById(resultsId);
          const searchResultsContent = document.getElementById(contentId);
          const clearButton = document.getElementById(clearId);

          if (!searchInput) return;

          let searchTimeout;

          searchInput.addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
              this.performSearch(e.target.value, searchResults, searchResultsContent, clearButton);
            }, 300);
          });

          searchInput.addEventListener('focus', () => {
            if (searchInput.value.trim()) {
              searchResults.style.display = 'block';
            }
          });

          // Clear search functionality
          if (clearButton) {
            clearButton.addEventListener('click', () => {
              this.clearSearch(searchInput, searchResults, searchResultsContent, clearButton);
            });
          }

          // Close results when clicking outside
          document.addEventListener('click', (e) => {
            if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
              searchResults.style.display = 'none';
            }
          });

          // Handle escape key
          searchInput.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
              this.clearSearch(searchInput, searchResults, searchResultsContent, clearButton);
            }
          });
        }

        updateSearchableElements() {
          this.searchableElements = [];
          
          // Define selectors for different page types
          const selectors = [
            // Project cards
            '.project-card .card-title',
            '.project-card .card-body p',
            
            // File and folder names
            '.folder-row span',
            '.file-row strong',
            
            // Table content
            'table tbody td',
            
            // List items
            '.list-group-item',
            
            // Card content
            '.card-body',
            
            // General text content
            'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
            
            // Breadcrumbs and navigation
            '.breadcrumb li',
            '.nav-link',
            
            // Buttons and badges
            '.btn', '.badge',
            
            // Form labels and inputs
            'label', '.form-control[placeholder]'
          ];

          selectors.forEach(selector => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
              const text = this.getElementText(element);
              if (text && text.length > 1) {
                this.searchableElements.push({
                  element: element,
                  text: text.toLowerCase(),
                  originalText: text
                });
              }
            });
          });
        }

        getElementText(element) {
          // For input elements, get placeholder text
          if (element.placeholder) {
            return element.placeholder;
          }
          
          // For other elements, get text content but exclude script/style elements
          const clone = element.cloneNode(true);
          const scripts = clone.querySelectorAll('script, style');
          scripts.forEach(script => script.remove());
          
          return clone.textContent || clone.innerText || '';
        }

        performSearch(query, searchResults, searchResultsContent, clearButton) {
          query = query.trim().toLowerCase();
          
          // Clear previous highlights
          this.clearHighlights();
          
          if (query.length < 2) {
            searchResults.style.display = 'none';
            clearButton.classList.add('d-none');
            return;
          }

          clearButton.classList.remove('d-none');
          
          const results = this.searchableElements.filter(item => 
            item.text.includes(query)
          );

          this.displayResults(results, query, searchResults, searchResultsContent);
          this.highlightMatches(query);
        }

        displayResults(results, query, searchResults, searchResultsContent) {
          if (results.length === 0) {
            searchResultsContent.innerHTML = `
              <div class="dropdown-item-text text-muted text-center py-3">
                <i class="bi bi-search me-2"></i>No results found for "${query}"
              </div>
            `;
          } else {
            const groupedResults = this.groupResults(results);
            let html = `<div class="dropdown-header">Found ${results.length} results</div>`;
            
            Object.keys(groupedResults).forEach(category => {
              if (groupedResults[category].length > 0) {
                html += `<h6 class="dropdown-header">${category}</h6>`;
                groupedResults[category].slice(0, 5).forEach(result => {
                  const highlightedText = this.highlightQuery(result.originalText, query);
                  html += `
                    <a href="#" class="dropdown-item search-result-item" data-element-id="${this.getElementId(result.element)}">
                      <div class="d-flex justify-content-between align-items-center">
                        <span>${highlightedText}</span>
                        <small class="text-muted">${this.getElementContext(result.element)}</small>
                      </div>
                    </a>
                  `;
                });
                
                if (groupedResults[category].length > 5) {
                  html += `<div class="dropdown-item-text text-muted small">... and ${groupedResults[category].length - 5} more</div>`;
                }
              }
            });
            
            searchResultsContent.innerHTML = html;
            
            // Add click handlers to scroll to elements
            searchResultsContent.querySelectorAll('.search-result-item').forEach(item => {
              item.addEventListener('click', (e) => {
                e.preventDefault();
                const elementId = e.currentTarget.dataset.elementId;
                this.scrollToElement(elementId);
                searchResults.style.display = 'none';
              });
            });
          }
          
          searchResults.style.display = 'block';
        }

        groupResults(results) {
          const groups = {
            'Projects': [],
            'Files & Folders': [],
            'Content': [],
            'Navigation': [],
            'Other': []
          };

          results.forEach(result => {
            const element = result.element;
            
            if (element.closest('.project-card')) {
              groups['Projects'].push(result);
            } else if (element.closest('.folder-row, .file-row')) {
              groups['Files & Folders'].push(result);
            } else if (element.closest('.nav-link, .breadcrumb')) {
              groups['Navigation'].push(result);
            } else if (element.tagName && ['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'].includes(element.tagName)) {
              groups['Content'].push(result);
            } else {
              groups['Other'].push(result);
            }
          });

          return groups;
        }

        highlightQuery(text, query) {
          const regex = new RegExp(`(${query})`, 'gi');
          return text.replace(regex, '<mark>$1</mark>');
        }

        highlightMatches(query) {
          this.searchableElements.forEach(item => {
            if (item.text.includes(query)) {
              this.highlightElement(item.element, query);
            }
          });
        }

        highlightElement(element, query) {
          // Store original style
          if (!this.originalStyles.has(element)) {
            this.originalStyles.set(element, {
              backgroundColor: element.style.backgroundColor,
              transition: element.style.transition
            });
          }

          // Add highlight
          element.style.backgroundColor = '#fff3cd';
          element.style.transition = 'background-color 0.3s ease';
          this.currentHighlights.push(element);
        }

        clearHighlights() {
          this.currentHighlights.forEach(element => {
            const original = this.originalStyles.get(element);
            if (original) {
              element.style.backgroundColor = original.backgroundColor;
              element.style.transition = original.transition;
            }
          });
          this.currentHighlights = [];
        }

        getElementId(element) {
          // Create a unique identifier for the element
          if (element.id) return element.id;
          
          // Create a temporary ID based on element position
          const rect = element.getBoundingClientRect();
          return `search_${Math.round(rect.top)}_${Math.round(rect.left)}`;
        }

        scrollToElement(elementId) {
          // Find element by ID or by position
          let element = document.getElementById(elementId);
          
          if (!element) {
            // If no ID, find by approximate position
            const coords = elementId.replace('search_', '').split('_');
            if (coords.length === 2) {
              const targetTop = parseInt(coords[0]);
              const targetLeft = parseInt(coords[1]);
              
              // Find closest element
              let closestElement = null;
              let closestDistance = Infinity;
              
              this.searchableElements.forEach(item => {
                const rect = item.element.getBoundingClientRect();
                const distance = Math.abs(rect.top - targetTop) + Math.abs(rect.left - targetLeft);
                if (distance < closestDistance) {
                  closestDistance = distance;
                  closestElement = item.element;
                }
              });
              
              element = closestElement;
            }
          }
          
          if (element) {
            element.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // Add a temporary pulse effect
            const originalTransform = element.style.transform;
            element.style.transform = 'scale(1.05)';
            element.style.transition = 'transform 0.3s ease';
            
            setTimeout(() => {
              element.style.transform = originalTransform;
            }, 600);
          }
        }

        getElementContext(element) {
          // Provide context about where the element is located
          if (element.closest('.project-card')) return 'Project';
          if (element.closest('.folder-row')) return 'Folder';
          if (element.closest('.file-row')) return 'File';
          if (element.closest('table')) return 'Table';
          if (element.closest('.nav')) return 'Navigation';
          if (element.closest('.card')) return 'Card';
          return 'Page';
        }

        clearSearch(searchInput, searchResults, searchResultsContent, clearButton) {
          searchInput.value = '';
          searchResults.style.display = 'none';
          clearButton.classList.add('d-none');
          this.clearHighlights();
          
          searchResultsContent.innerHTML = `
            <div class="dropdown-item-text text-muted text-center py-3">
              <i class="bi bi-search me-2"></i>Start typing to search...
            </div>
          `;
        }
      }

      // Initialize search when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        new ClientSideSearch();
      });

      // Also initialize on Turbo load for Rails 7
      document.addEventListener('turbo:load', () => {
        if (!window.clientSideSearch) {
          window.clientSideSearch = new ClientSideSearch();
        }
      });
    </script>

    <style>
      /* Search Results Styling */
      #searchResults, #mobileSearchResults {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        z-index: 1050;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        background: white;
        margin-top: 2px;
      }

      .search-result-item {
        transition: background-color 0.2s ease;
      }

      .search-result-item:hover {
        background-color: #f8f9fa;
      }

      .search-result-item mark {
        background-color: #fff3cd;
        padding: 0.1em 0.2em;
        border-radius: 0.25rem;
        font-weight: 600;
      }

      /* Mobile search improvements */
      @media (max-width: 991.98px) {
        #mobileSearch {
          border-top: 1px solid #dee2e6;
          padding-top: 1rem;
          margin-top: 1rem;
        }
      }

      /* Highlight animation */
      .search-highlight {
        animation: searchPulse 1s ease-in-out;
      }

      @keyframes searchPulse {
        0% { background-color: #fff3cd; }
        50% { background-color: #ffeaa7; }
        100% { background-color: #fff3cd; }
      }

      /* Improve dropdown header styling */
      .dropdown-header {
        font-weight: 600;
        color: #495057;
        font-size: 0.875rem;
        padding: 0.5rem 1rem 0.25rem;
      }

      /* Position relative for search container */
      .navbar .mx-auto {
        position: relative;
      }
    </style>
  </body>
</html>