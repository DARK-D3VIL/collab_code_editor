<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Collab Editor" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <link rel="manifest" href="/manifest.json">
    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    
    <!-- Application CSS -->
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
  </head>

  <body>
    <!-- Enhanced Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom shadow-sm sticky-top">
      <div class="container-fluid px-4">
        <!-- Brand -->
        <%= link_to root_path, class: "navbar-brand fw-bold text-secondary d-flex align-items-center" do %>
          <i class="bi bi-terminal me-2 text-primary"></i>
          <span class="text-dark">Collab Editor</span>
        <% end %>

        <!-- Mobile Toggle -->
        <button class="navbar-toggler border-0" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Navbar Content -->
        <div class="collapse navbar-collapse" id="navbarContent">
          <!-- Left Navigation -->
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <% if current_user %>
              <li class="nav-item">
                <%= link_to "Projects", projects_path, class: "nav-link #{current_page?(projects_path) ? 'fw-semibold text-dark' : 'text-muted'}" %>
              </li>
            <% end %>
          </ul>

          <!-- Enhanced Search Bar (only visible when logged in) -->
          <% if current_user %>
            <div class="search-container mx-auto" style="max-width: 480px; width: 100%;">
              <div class="search-wrapper position-relative">
                <div class="search-input-container">
                  <div class="search-icon-wrapper">
                    <i class="bi bi-search search-icon"></i>
                  </div>
                  <input 
                    type="text" 
                    id="enhancedSearch" 
                    class="search-input" 
                    placeholder="Search projects, files, content..."
                    autocomplete="off"
                    spellcheck="false"
                  >
                  <div class="search-actions">
                    <button class="search-clear-btn d-none" type="button" id="clearSearchBtn">
                      <i class="bi bi-x-lg"></i>
                    </button>
                    <div class="search-shortcut d-none d-lg-flex">
                      <kbd>âŒ˜K</kbd>
                    </div>
                  </div>
                </div>
                
                <!-- Search Results Dropdown -->
                <div id="searchDropdown" class="search-dropdown">
                  <div class="search-dropdown-content" id="searchContent">
                    <div class="search-empty-state">
                      <div class="empty-state-content">
                        <i class="bi bi-search empty-state-icon"></i>
                        <span class="empty-state-text">Start typing to search across your workspace</span>
                        <div class="search-tips">
                          <small class="text-muted">Try searching for projects, files, or content</small>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          <% end %>

          <!-- Right Navigation -->
          <ul class="navbar-nav ms-auto align-items-center">
            <% if current_user %>
              <!-- Mobile Search Button -->
              <li class="nav-item d-lg-none">
                <button class="btn btn-outline-light nav-search-toggle" type="button" data-bs-toggle="collapse" data-bs-target="#mobileSearchCollapse" aria-expanded="false" aria-controls="mobileSearchCollapse">
                  <i class="bi bi-search text-muted"></i>
                </button>
              </li>
              
              <!-- User Dropdown -->
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle d-flex align-items-center text-muted" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <div class="user-avatar me-2">
                    <i class="bi bi-person-circle fs-5"></i>
                  </div>
                  <span class="fw-medium d-none d-md-inline"><%= current_user.username || current_user.email %></span>
                </a>
                <ul class="dropdown-menu dropdown-menu-end shadow-sm border-0">
                  <li>
                    <%= link_to user_join_requests_path, class: "dropdown-item" do %>
                      <i class="bi bi-clock-history me-2"></i>Pending Requests
                    <% end %>
                  </li>
                  <li>
                    <%= link_to user_settings_path, class: "dropdown-item" do %>
                      <i class="bi bi-gear me-2"></i>Settings
                    <% end %>
                  </li>
                  <li><hr class="dropdown-divider"></li>
                  <li>
                    <%= button_to destroy_user_session_path, method: :delete, class: "dropdown-item text-danger", style: "border: none; background: none; width: 100%; text-align: left;" do %>
                      <i class="bi bi-box-arrow-right me-2"></i>Sign Out
                    <% end %>
                  </li>
                </ul>
              </li>
            <% else %>
              <li class="nav-item">
                <%= link_to "Sign In", new_user_session_path, class: "btn btn-sm btn-outline-secondary" %>
              </li>
            <% end %>
          </ul>
        </div>

        <!-- Mobile Search Collapse -->
        <% if current_user %>
          <div class="collapse d-lg-none" id="mobileSearchCollapse">
            <div class="container-fluid px-4 py-3 border-top bg-light">
              <div class="search-wrapper position-relative">
                <div class="search-input-container">
                  <div class="search-icon-wrapper">
                    <i class="bi bi-search search-icon"></i>
                  </div>
                  <input 
                    type="text" 
                    id="mobileSearch" 
                    class="search-input" 
                    placeholder="Search projects, files, content..."
                    autocomplete="off"
                  >
                  <div class="search-actions">
                    <button class="search-clear-btn d-none" type="button" id="mobileClearBtn">
                      <i class="bi bi-x-lg"></i>
                    </button>
                  </div>
                </div>
                
                <!-- Mobile Search Results -->
                <div id="mobileSearchDropdown" class="search-dropdown mobile-dropdown">
                  <div class="search-dropdown-content" id="mobileSearchContent">
                    <div class="search-empty-state">
                      <div class="empty-state-content">
                        <i class="bi bi-search empty-state-icon"></i>
                        <span class="empty-state-text">Start typing to search</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </nav>

    <!-- Flash Alerts -->
    <div style="position: fixed; top: 1rem; right: 1rem; z-index: 1050;">
      <% flash.each do |type, message| %>
        <% alert_class = case type.to_sym
            when :notice then 'alert-success'
            when :alert  then 'alert-danger'
            else "alert-info"
          end %>
        <div class="alert <%= alert_class %> alert-dismissible fade show auto-dismiss shadow" role="alert">
          <%= message %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% end %>
    </div>

    <!-- Main Content -->
    <div style="padding-top: 1.5rem;">
      <%= yield %>
    </div>

    <!-- Enhanced Search Styles -->
    <style>
      /* CSS Variables */
      :root {
        --search-bg: #f8f9fa;
        --search-border: #e9ecef;
        --search-focus: #0d6efd;
        --search-hover: #e3f2fd;
        --search-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        --search-radius: 12px;
      }

      /* Search Container */
      .search-container {
        position: relative;
        z-index: 1000;
      }

      .search-wrapper {
        position: relative;
      }

      /* Search Input Container */
      .search-input-container {
        position: relative;
        display: flex;
        align-items: center;
        background: var(--search-bg);
        border: 2px solid transparent;
        border-radius: var(--search-radius);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: hidden;
        height: 44px;
      }

      .search-input-container:hover {
        background: #e9ecef;
        border-color: var(--search-border);
      }

      .search-input-container:focus-within {
        background: white;
        border-color: var(--search-focus);
        box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.1);
        transform: translateY(-1px);
      }

      /* Search Icon */
      .search-icon-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 44px;
        height: 44px;
        flex-shrink: 0;
      }

      .search-icon {
        color: #6c757d;
        font-size: 16px;
        transition: color 0.3s ease;
      }

      .search-input-container:focus-within .search-icon {
        color: var(--search-focus);
      }

      /* Search Input */
      .search-input {
        flex: 1;
        border: none;
        background: transparent;
        padding: 0 8px;
        font-size: 14px;
        font-weight: 400;
        color: #495057;
        outline: none;
        min-width: 0;
      }

      .search-input::placeholder {
        color: #6c757d;
        font-weight: 400;
      }

      .search-input:focus::placeholder {
        color: #adb5bd;
      }

      /* Search Actions */
      .search-actions {
        display: flex;
        align-items: center;
        gap: 8px;
        padding-right: 8px;
        flex-shrink: 0;
      }

      /* Clear Button */
      .search-clear-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
        border: none;
        background: #dc3545;
        color: white;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 12px;
      }

      .search-clear-btn:hover {
        background: #c82333;
        transform: scale(1.05);
      }

      /* Keyboard Shortcut */
      .search-shortcut {
        align-items: center;
        gap: 2px;
      }

      .search-shortcut kbd {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 2px 6px;
        font-size: 11px;
        color: #6c757d;
        font-weight: 500;
        min-width: 20px;
        text-align: center;
      }

      /* Search Dropdown */
      .search-dropdown {
        position: absolute;
        top: calc(100% + 8px);
        left: 0;
        right: 0;
        background: white;
        border: 1px solid var(--search-border);
        border-radius: var(--search-radius);
        box-shadow: var(--search-shadow);
        z-index: 1050;
        display: none;
        max-height: 420px;
        overflow: hidden;
      }

      .search-dropdown.show {
        display: block;
        animation: searchDropdownShow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      }

      @keyframes searchDropdownShow {
        from {
          opacity: 0;
          transform: translateY(-8px) scale(0.98);
        }
        to {
          opacity: 1;
          transform: translateY(0) scale(1);
        }
      }

      /* Mobile Dropdown */
      .mobile-dropdown {
        position: static;
        margin-top: 12px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      }

      /* Search Dropdown Content */
      .search-dropdown-content {
        max-height: 420px;
        overflow-y: auto;
      }

      /* Empty State */
      .search-empty-state {
        padding: 32px 24px;
        text-align: center;
      }

      .empty-state-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 12px;
      }

      .empty-state-icon {
        font-size: 24px;
        color: #adb5bd;
        opacity: 0.8;
      }

      .empty-state-text {
        color: #6c757d;
        font-size: 14px;
        font-weight: 500;
      }

      .search-tips {
        margin-top: 8px;
      }

      /* Search Results */
      .search-results-header {
        padding: 12px 20px 8px;
        border-bottom: 1px solid #f1f3f4;
        background: #fafbfc;
      }

      .search-results-count {
        font-size: 12px;
        font-weight: 600;
        color: #495057;
        margin: 0;
      }

      .search-category {
        border-bottom: 1px solid #f1f3f4;
      }

      .search-category:last-child {
        border-bottom: none;
      }

      .search-category-header {
        padding: 12px 20px 6px;
        background: #fafbfc;
        border-bottom: 1px solid #f1f3f4;
      }

      .search-category-title {
        font-size: 11px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: #868e96;
        margin: 0;
      }

      /* Search Result Items */
      .search-result-item {
        display: block;
        padding: 12px 20px;
        border: none;
        background: none;
        width: 100%;
        text-align: left;
        text-decoration: none;
        color: #495057;
        transition: all 0.2s ease;
        cursor: pointer;
        border-left: 3px solid transparent;
      }

      .search-result-item:hover {
        background: var(--search-hover);
        border-left-color: var(--search-focus);
        color: #495057;
        text-decoration: none;
      }

      .search-result-item:focus {
        background: var(--search-hover);
        border-left-color: var(--search-focus);
        outline: none;
        box-shadow: inset 0 0 0 2px rgba(13, 110, 253, 0.1);
      }

      .search-result-content {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        gap: 12px;
      }

      .search-result-main {
        flex: 1;
        min-width: 0;
      }

      .search-result-title {
        font-weight: 600;
        font-size: 14px;
        line-height: 1.3;
        margin-bottom: 2px;
        color: #212529;
      }

      .search-result-description {
        font-size: 12px;
        color: #6c757d;
        line-height: 1.4;
        margin: 0;
      }

      .search-result-meta {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 4px;
        flex-shrink: 0;
      }

      .search-result-type {
        font-size: 10px;
        background: #f8f9fa;
        color: #6c757d;
        padding: 2px 8px;
        border-radius: 10px;
        text-transform: uppercase;
        font-weight: 600;
        letter-spacing: 0.3px;
      }

      .search-result-icon {
        width: 16px;
        height: 16px;
        opacity: 0.7;
      }

      /* Highlight Styling */
      mark {
        background: linear-gradient(120deg, #fff3cd 0%, #ffeaa7 100%);
        color: #856404;
        padding: 1px 2px;
        border-radius: 2px;
        font-weight: 600;
      }

      /* Loading State */
      .search-loading {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 24px;
        color: #6c757d;
        font-size: 14px;
        gap: 12px;
      }

      .search-loading::after {
        content: '';
        width: 16px;
        height: 16px;
        border: 2px solid #f3f3f3;
        border-top: 2px solid var(--search-focus);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      /* User Avatar */
      .user-avatar {
        transition: transform 0.2s ease;
      }

      .dropdown-toggle:hover .user-avatar {
        transform: scale(1.1);
      }

      /* Mobile Styles */
      @media (max-width: 991.98px) {
        .search-container {
          max-width: none !important;
        }

        .search-input {
          font-size: 16px; /* Prevent zoom on iOS */
        }

        .search-shortcut {
          display: none !important;
        }

        #mobileSearchCollapse {
          border-top: 1px solid #e9ecef;
          padding-top: 0;
          margin-top: 8px;
        }

        .search-input-container {
          border-radius: 10px;
        }

        .search-dropdown {
          border-radius: 10px;
        }
      }
    </style>

    <!-- Bootstrap JavaScript Bundle (includes Popper) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Enhanced Search JavaScript -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize Bootstrap components
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
          return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
          return new bootstrap.Popover(popoverTriggerEl);
        });

        // Auto-dismiss alerts
        const alerts = document.querySelectorAll('.alert.auto-dismiss');
        alerts.forEach(function(alert) {
          setTimeout(function() {
            alert.classList.remove('show');
            setTimeout(function() {
              alert.remove();
            }, 300);
          }, 5000);
        });

        // Enhanced Search Class
        class EnhancedSearch {
          constructor() {
            this.searchableElements = [];
            this.currentHighlights = [];
            this.searchTimeout = null;
            this.focusedResultIndex = -1;
            
            this.init();
            this.setupKeyboardShortcuts();
          }

          init() {
            this.initializeSearch('enhancedSearch', 'searchDropdown', 'searchContent', 'clearSearchBtn');
            this.initializeSearch('mobileSearch', 'mobileSearchDropdown', 'mobileSearchContent', 'mobileClearBtn');
            this.updateSearchableElements();
            this.observeContentChanges();
          }

          setupKeyboardShortcuts() {
            document.addEventListener('keydown', (e) => {
              if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
                e.preventDefault();
                const searchInput = document.getElementById('enhancedSearch');
                if (searchInput) {
                  searchInput.focus();
                }
              }
            });
          }

          initializeSearch(inputId, dropdownId, contentId, clearId) {
            const searchInput = document.getElementById(inputId);
            const searchDropdown = document.getElementById(dropdownId);
            const searchContent = document.getElementById(contentId);
            const clearButton = document.getElementById(clearId);

            if (!searchInput) return;

            searchInput.addEventListener('input', (e) => {
              this.handleSearchInput(e.target.value, searchDropdown, searchContent, clearButton);
            });

            searchInput.addEventListener('focus', () => {
              if (searchInput.value.trim()) {
                this.showDropdown(searchDropdown);
              }
              this.updateShortcutVisibility(false);
            });

            searchInput.addEventListener('blur', () => {
              setTimeout(() => {
                if (!searchDropdown.matches(':hover')) {
                  this.hideDropdown(searchDropdown);
                }
              }, 150);
              this.updateShortcutVisibility(true);
            });

            if (clearButton) {
              clearButton.addEventListener('click', () => {
                this.clearSearch(searchInput, searchDropdown, searchContent, clearButton);
              });
            }

            searchInput.addEventListener('keydown', (e) => {
              this.handleKeyNavigation(e, searchDropdown, searchContent);
            });

            document.addEventListener('click', (e) => {
              if (!e.target.closest('.search-wrapper')) {
                this.hideDropdown(searchDropdown);
              }
            });

            document.addEventListener('keydown', (e) => {
              if (e.key === 'Escape') {
                this.hideDropdown(searchDropdown);
                searchInput.blur();
              }
            });
          }

          updateShortcutVisibility(show) {
            const shortcut = document.querySelector('.search-shortcut');
            if (shortcut) {
              shortcut.style.opacity = show ? '1' : '0';
            }
          }

          handleSearchInput(query, dropdown, content, clearButton) {
            if (this.searchTimeout) {
              clearTimeout(this.searchTimeout);
            }

            this.clearHighlights();

            if (query.trim()) {
              if (clearButton) clearButton.classList.remove('d-none');
            } else {
              if (clearButton) clearButton.classList.add('d-none');
              this.hideDropdown(dropdown);
              this.showEmptyState(content);
              return;
            }

            if (query.length >= 2) {
              this.showLoadingState(content);
              this.showDropdown(dropdown);
            }

            this.searchTimeout = setTimeout(() => {
              this.performSearch(query, dropdown, content);
            }, 200);
          }

          performSearch(query, dropdown, content) {
            query = query.trim().toLowerCase();
            
            if (query.length < 2) {
              this.hideDropdown(dropdown);
              return;
            }

            this.focusedResultIndex = -1;

            const results = this.searchableElements
              .filter(item => item.text.includes(query))
              .slice(0, 30);

            this.displayResults(results, query, dropdown, content);
            this.highlightMatches(query);
          }

          displayResults(results, query, dropdown, content) {
            if (results.length === 0) {
              this.showNoResults(content, query);
              return;
            }

            const groupedResults = this.groupResults(results);
            let html = '<div class="search-results-header"><p class="search-results-count">Found ' + results.length + ' result' + (results.length !== 1 ? 's' : '') + '</p></div>';
            
            Object.entries(groupedResults).forEach(([category, items]) => {
              if (items.length > 0) {
                html += '<div class="search-category"><div class="search-category-header"><p class="search-category-title">' + category + '</p></div>';
                
                items.slice(0, 6).forEach((result, index) => {
                  const highlightedTitle = this.highlightQuery(result.originalText, query);
                  const description = this.getElementDescription(result.element, query);
                  const icon = this.getElementIcon(result.element);
                  const type = this.getElementContext(result.element);
                  
                  html += '<button class="search-result-item" data-element-id="' + this.getElementId(result.element) + '" tabindex="0">';
                  html += '<div class="search-result-content">';
                  html += '<div class="search-result-main">';
                  html += '<div class="search-result-title">' + highlightedTitle + '</div>';
                  if (description) {
                    html += '<p class="search-result-description">' + description + '</p>';
                  }
                  html += '</div>';
                  html += '<div class="search-result-meta">';
                  html += '<span class="search-result-type">' + type + '</span>';
                  if (icon) {
                    html += '<i class="bi ' + icon + ' search-result-icon"></i>';
                  }
                  html += '</div></div></button>';
                });
                
                if (items.length > 6) {
                  html += '<div class="search-empty-state" style="padding: 12px 20px;">';
                  html += '<span class="empty-state-text" style="font-size: 12px;">... and ' + (items.length - 6) + ' more ' + category.toLowerCase() + ' results</span>';
                  html += '</div>';
                }
                
                html += '</div>';
              }
            });
            
            content.innerHTML = html;
            
            content.querySelectorAll('.search-result-item').forEach(item => {
              item.addEventListener('click', (e) => {
                e.preventDefault();
                const elementId = e.currentTarget.dataset.elementId;
                this.scrollToElement(elementId);
                this.hideDropdown(dropdown);
              });
            });
          }

          groupResults(results) {
            const groups = {
              'Projects': [],
              'Navigation': [],
              'Content': [],
              'Interface': []
            };

            results.forEach(result => {
              const element = result.element;
              
              if (element.closest('.project-card')) {
                groups['Projects'].push(result);
              } else if (element.closest('.navbar, .nav-link, .breadcrumb')) {
                groups['Navigation'].push(result);
              } else if (element.tagName && ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P'].includes(element.tagName)) {
                groups['Content'].push(result);
              } else {
                groups['Interface'].push(result);
              }
            });

            Object.keys(groups).forEach(key => {
              if (groups[key].length === 0) {
                delete groups[key];
              }
            });

            return groups;
          }

          getElementIcon(element) {
            if (element.closest('.project-card')) {
              const iconElement = element.closest('.project-card').querySelector('.project-icon i');
              return iconElement ? iconElement.className.split(' ').find(cls => cls.startsWith('bi-')) : 'bi-folder';
            }
            if (element.closest('.navbar')) return 'bi-navigation';
            if (element.tagName && ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].includes(element.tagName)) return 'bi-type-h1';
            if (element.tagName === 'P') return 'bi-text-paragraph';
            if (element.closest('.btn')) return 'bi-cursor';
            return null;
          }

          getElementDescription(element, query) {
            if (element.closest('.project-card')) {
              const description = element.closest('.project-card').querySelector('.card-text');
              if (description && description !== element) {
                let text = description.textContent.trim();
                if (text.length > 80) {
                  text = text.substring(0, 80) + '...';
                }
                return this.highlightQuery(text, query);
              }
            }
            
            const text = this.getElementText(element);
            if (text.length > 60) {
              let preview = text.substring(0, 60) + '...';
              return this.highlightQuery(preview, query);
            }
            
            return null;
          }

          highlightQuery(text, query) {
            if (!text || !query) return text;
            
            const regex = new RegExp('(' + this.escapeRegExp(query) + ')', 'gi');
            return text.replace(regex, '<mark>$1</mark>');
          }

          escapeRegExp(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }

          highlightMatches(query) {
            this.clearTextHighlights();
            
            this.searchableElements.forEach(item => {
              if (item.text.includes(query.toLowerCase())) {
                this.highlightTextInElement(item.element, query);
              }
            });
          }

          highlightTextInElement(element, query) {
            if (element.querySelector('script, style, input, textarea, select')) {
              return;
            }

            const walker = document.createTreeWalker(
              element,
              NodeFilter.SHOW_TEXT,
              {
                acceptNode: function(node) {
                  if (node.parentElement.matches('script, style, input, textarea, select, code, pre')) {
                    return NodeFilter.FILTER_REJECT;
                  }
                  if (node.textContent.toLowerCase().includes(query.toLowerCase())) {
                    return NodeFilter.FILTER_ACCEPT;
                  }
                  return NodeFilter.FILTER_REJECT;
                }
              }
            );

            const textNodes = [];
            let node;
            while (node = walker.nextNode()) {
              textNodes.push(node);
            }

            textNodes.forEach(textNode => {
              this.highlightTextNode(textNode, query);
            });
          }

          highlightTextNode(textNode, query) {
            const text = textNode.textContent;
            const regex = new RegExp('(' + this.escapeRegExp(query) + ')', 'gi');
            
            if (regex.test(text)) {
              const highlightedHTML = text.replace(regex, '<span class="search-text-highlight">$1</span>');
              
              const tempDiv = document.createElement('div');
              tempDiv.innerHTML = highlightedHTML;
              
              const parent = textNode.parentNode;
              const fragment = document.createDocumentFragment();
              
              while (tempDiv.firstChild) {
                fragment.appendChild(tempDiv.firstChild);
              }
              
              parent.replaceChild(fragment, textNode);
              
              parent.querySelectorAll('.search-text-highlight').forEach(span => {
                this.currentHighlights.push(span);
              });
            }
          }

          clearTextHighlights() {
            document.querySelectorAll('.search-text-highlight').forEach(span => {
              const parent = span.parentNode;
              parent.replaceChild(document.createTextNode(span.textContent), span);
              parent.normalize();
            });
            this.currentHighlights = [];
          }

          clearHighlights() {
            this.clearTextHighlights();
          }

          updateSearchableElements() {
            this.searchableElements = [];
            
            const selectors = [
              '.project-card .card-title',
              '.project-card .card-text',
              '.folder-row span',
              '.file-row strong',
              'table tbody td',
              '.list-group-item',
              '.card-body',
              'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
              '.breadcrumb li',
              '.nav-link',
              '.btn', '.badge',
              'label', '.form-control[placeholder]'
            ];

            selectors.forEach(selector => {
              document.querySelectorAll(selector).forEach(element => {
                const text = this.getElementText(element);
                if (text && text.trim().length > 1) {
                  this.searchableElements.push({
                    element: element,
                    text: text.toLowerCase(),
                    originalText: text.trim()
                  });
                }
              });
            });
          }

          getElementText(element) {
            if (element.placeholder) return element.placeholder;
            
            const clone = element.cloneNode(true);
            const scripts = clone.querySelectorAll('script, style');
            scripts.forEach(script => script.remove());
            
            return clone.textContent || clone.innerText || '';
          }

          getElementContext(element) {
            if (element.closest('.project-card')) return 'Project';
            if (element.closest('.folder-row')) return 'Folder';
            if (element.closest('.file-row')) return 'File';
            if (element.closest('table')) return 'Table';
            if (element.closest('.nav')) return 'Navigation';
            if (element.closest('.card')) return 'Card';
            if (element.closest('.btn')) return 'Button';
            if (element.tagName && ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].includes(element.tagName)) return 'Heading';
            if (element.tagName === 'P') return 'Content';
            if (element.closest('.badge')) return 'Badge';
            return 'Page';
          }

          getElementId(element) {
            if (element.id) return element.id;
            
            const rect = element.getBoundingClientRect();
            const tagName = element.tagName.toLowerCase();
            const textContent = element.textContent.trim().substring(0, 20).replace(/\s+/g, '_');
            
            return 'search_' + tagName + '_' + Math.round(rect.top) + '_' + textContent;
          }

          scrollToElement(elementId) {
            let element = document.getElementById(elementId);
            
            if (!element) {
              const parts = elementId.split('_');
              if (parts.length >= 3) {
                const tagName = parts[1];
                const targetTop = parseInt(parts[2]);
                const textHint = parts.slice(3).join('_');
                
                let closestElement = null;
                let closestScore = Infinity;
                
                this.searchableElements.forEach(item => {
                  if (item.element.tagName.toLowerCase() === tagName) {
                    const rect = item.element.getBoundingClientRect();
                    const positionScore = Math.abs(rect.top - targetTop);
                    const textScore = textHint ? (item.text.includes(textHint.toLowerCase()) ? 0 : 100) : 0;
                    const totalScore = positionScore + textScore;
                    
                    if (totalScore < closestScore) {
                      closestScore = totalScore;
                      closestElement = item.element;
                    }
                  }
                });
                
                element = closestElement;
              }
            }
            
            if (element) {
              const navbar = document.querySelector('.navbar');
              const navbarHeight = navbar ? navbar.offsetHeight : 0;
              const elementTop = element.getBoundingClientRect().top + window.pageYOffset - navbarHeight - 24;
              
              window.scrollTo({
                top: Math.max(0, elementTop),
                behavior: 'smooth'
              });
              
              setTimeout(() => {
                element.style.outline = '3px solid #0d6efd';
                element.style.outlineOffset = '6px';
                element.style.borderRadius = '8px';
                element.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
                element.style.boxShadow = '0 0 0 10px rgba(13, 110, 253, 0.1)';
                element.style.transform = 'scale(1.02)';
                
                setTimeout(() => {
                  element.style.outline = '';
                  element.style.outlineOffset = '';
                  element.style.borderRadius = '';
                  element.style.boxShadow = '';
                  element.style.transform = '';
                }, 2500);
              }, 400);
            }
          }

          handleKeyNavigation(e, dropdown, content) {
            const items = content.querySelectorAll('.search-result-item');
            
            switch (e.key) {
              case 'ArrowDown':
                e.preventDefault();
                this.focusedResultIndex = Math.min(this.focusedResultIndex + 1, items.length - 1);
                this.updateFocusedResult(items);
                break;
                
              case 'ArrowUp':
                e.preventDefault();
                this.focusedResultIndex = Math.max(this.focusedResultIndex - 1, -1);
                this.updateFocusedResult(items);
                break;
                
              case 'Enter':
                e.preventDefault();
                if (this.focusedResultIndex >= 0 && items[this.focusedResultIndex]) {
                  items[this.focusedResultIndex].click();
                }
                break;
                
              case 'Escape':
                e.preventDefault();
                this.hideDropdown(dropdown);
                e.target.blur();
                break;
            }
          }

          updateFocusedResult(items) {
            items.forEach((item, index) => {
              if (index === this.focusedResultIndex) {
                item.focus();
                item.scrollIntoView({ block: 'nearest' });
              }
            });
          }

          showDropdown(dropdown) {
            dropdown.style.display = 'block';
            setTimeout(() => dropdown.classList.add('show'), 10);
          }

          hideDropdown(dropdown) {
            dropdown.classList.remove('show');
            setTimeout(() => {
              if (!dropdown.classList.contains('show')) {
                dropdown.style.display = 'none';
              }
            }, 200);
          }

          showEmptyState(content) {
            content.innerHTML = '<div class="search-empty-state"><div class="empty-state-content"><i class="bi bi-search empty-state-icon"></i><span class="empty-state-text">Start typing to search across your workspace</span><div class="search-tips"><small class="text-muted">Try searching for projects, files, or content</small></div></div></div>';
          }

          showLoadingState(content) {
            content.innerHTML = '<div class="search-loading"><span>Searching...</span></div>';
          }

          showNoResults(content, query) {
            content.innerHTML = '<div class="search-empty-state"><div class="empty-state-content"><i class="bi bi-search empty-state-icon"></i><span class="empty-state-text">No results found for "' + this.escapeHtml(query) + '"</span><div class="search-tips"><small class="text-muted">Try different keywords or check spelling</small></div></div></div>';
          }

          escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
          }

          clearSearch(input, dropdown, content, clearButton) {
            input.value = '';
            this.hideDropdown(dropdown);
            if (clearButton) clearButton.classList.add('d-none');
            this.clearHighlights();
            this.showEmptyState(content);
            this.focusedResultIndex = -1;
            input.focus();
          }

          observeContentChanges() {
            const observer = new MutationObserver((mutations) => {
              let shouldRefresh = false;
              
              mutations.forEach((mutation) => {
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                  mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === Node.ELEMENT_NODE && 
                        (node.matches && node.matches('.project-card, .nav-link, h1, h2, h3, h4, h5, h6, p, .btn, .badge') ||
                         node.querySelector && node.querySelector('.project-card, .nav-link, h1, h2, h3, h4, h5, h6, p, .btn, .badge'))) {
                      shouldRefresh = true;
                    }
                  });
                }
              });
              
              if (shouldRefresh) {
                clearTimeout(this.refreshTimeout);
                this.refreshTimeout = setTimeout(() => {
                  this.updateSearchableElements();
                }, 300);
              }
            });

            observer.observe(document.body, {
              childList: true,
              subtree: true
            });
          }

          refresh() {
            this.updateSearchableElements();
          }

          reset() {
            this.clearHighlights();
            const inputs = ['enhancedSearch', 'mobileSearch'];
            const dropdowns = ['searchDropdown', 'mobileSearchDropdown'];
            
            inputs.forEach(id => {
              const input = document.getElementById(id);
              if (input) input.value = '';
            });
            
            dropdowns.forEach(id => {
              const dropdown = document.getElementById(id);
              if (dropdown) this.hideDropdown(dropdown);
            });
            
            this.focusedResultIndex = -1;
          }
        }

        // Initialize enhanced search
        const enhancedSearchInstance = new EnhancedSearch();
        window.enhancedSearch = enhancedSearchInstance;

        // Additional CSS for text highlighting
        const style = document.createElement('style');
        style.textContent = `
          .search-text-highlight {
            background: linear-gradient(120deg, #fff3cd 0%, #ffeaa7 100%);
            color: #856404;
            padding: 1px 3px;
            border-radius: 3px;
            font-weight: 600;
            box-shadow: 0 1px 3px rgba(133, 100, 4, 0.1);
            animation: textHighlightPulse 1.5s ease-in-out;
          }
          
          @keyframes textHighlightPulse {
            0% { 
              background: linear-gradient(120deg, #fff3cd 0%, #ffeaa7 100%);
              transform: scale(1);
            }
            50% { 
              background: linear-gradient(120deg, #ffeaa7 0%, #fff3cd 100%);
              transform: scale(1.02);
            }
            100% { 
              background: linear-gradient(120deg, #fff3cd 0%, #ffeaa7 100%);
              transform: scale(1);
            }
          }
        `;
        document.head.appendChild(style);
      });
    </script>
  </body>
</html>