# docker-compose.prod.yml
# Use your existing production Dockerfile
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: rails_postgres_prod
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-myapp_production}
      POSTGRES_USER: ${DATABASE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - rails_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache/Session Store
  redis:
    image: redis:7-alpine
    container_name: rails_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_prod_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - rails_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Rails Application (Production)
  web:
    build: 
      context: .
      dockerfile: Dockerfile  # Use your existing production Dockerfile
    container_name: rails_app_prod
    volumes:
      - rails_storage_prod:/rails/storage
    ports:
      - "${RAILS_PORT:-3000}:3000"
    environment:
      - RAILS_ENV=production
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - DATABASE_URL=postgresql://${DATABASE_USERNAME:-postgres}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME:-myapp_production}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rails_network
    restart: unless-stopped

  # Sidekiq Background Jobs (Production)
  sidekiq:
    build: 
      context: .
      dockerfile: Dockerfile  # Use your existing production Dockerfile
    container_name: rails_sidekiq_prod
    command: bundle exec sidekiq
    volumes:
      - rails_storage_prod:/rails/storage
    environment:
      - RAILS_ENV=production
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - DATABASE_URL=postgresql://${DATABASE_USERNAME:-postgres}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME:-myapp_production}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rails_network
    restart: unless-stopped

volumes:
  postgres_prod_data:
  redis_prod_data:
  rails_storage_prod:

networks:
  rails_network:
    driver: bridge